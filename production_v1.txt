//程序
program -> func_def_dec program
program -> $

//函数定义或声明
func_def_dec -> TYPE var ( param_dec ) func_def_dec_closure

//函数定义或声明闭包
func_def_dec_closure -> com_func_block
func_def_dec_closure -> ;

//复合函数模块
com_func_block -> { func_block }

//值
value -> INT
value -> REAL
value -> CHAR
value -> STRING

//变量
var -> IDENTIFIER arr_sub

//数组下标
arr_sub -> [ exp ]
arr_sub -> $

//因式
factors -> ( exp ) right_in_de
factors -> var right_in_de
factors -> value right_in_de
factors -> $
right_in_de -> self_in_decrease_op
right_in_de -> $
//表达式
exp -> unary_exp
exp -> factor item
//一元表达式 右自增减
unary_exp -> prefix_exp
//前后缀表达式
prefix_exp -> self_in_decrease_op var
//因式(factors) 因式递归
factor -> factors factor_recursion
factor_recursion -> BIN_AR_OP_1 factors factor_recursion
factor_recursion -> logic_op factors factor_recursion
factor_recursion -> $

//项
item -> BIN_AR_OP_2 factor item
item -> $

//右值 表达式、输入、数组
right_value -> exp
right_value -> scan_stm
right_value -> { mult_data }
//多数据
mult_data -> exp number_closure
number_closure -> , exp number_closure
number_closure -> $

//赋初值
assign_init_value -> ASS_INIT_OP right_value
assign_init_value -> $

//参数声明  声明  声明闭包
param_dec -> $
dec -> TYPE var assign_init_value dec_one_line
dec_one_line -> , var assign_init_value dec_one_line
dec_one_line -> $

//函数块 -> 声明语句闭包 函数块闭包
func_block -> dec_stat_closure func_block_closure
func_block -> value ;
func_block -> com_func_block func_block
dec_stat_closure -> dec_statement dec_stat_closure
dec_stat_closure -> ; dec_stat_closure
dec_stat_closure -> $
dec_statement -> dec ;
func_block_closure -> assign_func func_block
func_block_closure -> for_loop func_block
func_block_closure -> while_loop func_block
func_block_closure -> break ;
func_block_closure -> continue ;
func_block_closure -> print_stm ; func_block
func_block_closure -> scan_stm ; func_block
//函数块闭包 -> 条件语句 函数块
//函数块闭包 -> 函数返回 函数块
func_block_closure -> conditional_stat func_block
func_block_closure -> func_return func_block
func_block_closure -> $

//打印、输入
scan_stm -> scan ( scan_value )
scan_value -> $
scan_value -> exp
print_stm -> print ( print_val )
print_val -> exp

//赋值函数 赋值 函数调用
assign_func -> self_in_decrease_op var ;
assign_func -> var ass_funccall
ass_funccall -> self_in_decrease_op ;
ass_funccall -> ASS_INIT_OP right_value ;
ass_funccall -> aaa right_value ;
ass_funccall -> BIN_AR_OP_1 right_value ;
ass_funccall -> BIN_AR_OP_2 right_value ;
ass_funccall -> ASSIGNMENT_OP right_value ;
ass_funccall -> ( param_list ) ;

//参数列表 参数
param_list -> param param_closure
param_closure -> , param param_closure
param_closure -> $
param -> identifier
param -> value

//循环循环
for_loop -> for for_loop_block
for_loop_block -> ( assign_func exp ; for_after ) loop_block

for_after -> var for_after_op
for_after_op -> self_in_decrease_op
for_after_op -> ASS_INIT_OP right_value
for_after_op -> ASSIGNMENT_OP right_value

while_loop -> while while_loop_block
while_loop_block -> ( exp ) loop_block
loop_block -> com_func_block
loop_block -> ;
loop_block -> assign_func
loop_block -> print_stm ;
loop_block -> conditional_stat
//条件语句
conditional_stat -> if conditional_stat_block
conditional_stat_block -> ( exp ) if_then_block
if_then_block -> ;
if_then_block -> conditional_stat
if_then_block -> assign_func else_stat
if_then_block -> print_stm ; else_stat
if_then_block -> scan_stm ; else_stat
if_then_block -> com_func_block else_stat
else_stat -> else else_if_stat
else_stat -> $
else_if_stat -> com_func_block
else_if_stat -> assign_func
else_if_stat -> break ;
else_if_stat -> continue ;
else_if_stat -> print_stm ;
else_if_stat -> conditional_stat
func_return -> return factors ;

//逻辑运算符
logic_op -> LOGIC_OP

//自增减运算符
self_in_decrease_op -> SELF_OP

